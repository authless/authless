{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.10.4",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@authless/common!",
  "docComment": "",
  "name": "@authless/common",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@authless/common!",
      "name": "",
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "@authless/common!BotConfig:interface",
          "docComment": "/**\n * The configuration to instantiate a Bot. Is passed to a {@link Bot}\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BotConfig "
            }
          ],
          "releaseTag": "Beta",
          "name": "BotConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!BotConfig#browserConfig:member",
              "docComment": "/**\n * The puppeteer specific configuration for the bot. {@link BrowserConfig}\n *\n * @remarks\n *\n * This allows bots to have their own proxy/plugin configurations.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "browserConfig?: "
                },
                {
                  "kind": "Reference",
                  "text": "BrowserConfig",
                  "canonicalReference": "@authless/common!BrowserConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "browserConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!BotConfig#credentials:member",
              "docComment": "/**\n * The credentials for a bot. May be omitted for anonymous bots(no authentication needed)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "credentials?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        username: string;\n        password: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "credentials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!BotConfig#rateLimit:member",
              "docComment": "/**\n * The limit per hour under which a bot can be used.\n *\n * @remarks\n *\n * If the usage is above the limit, the bot-router will not return this bots till an appropriate amount of time has passed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rateLimit?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "rateLimit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!BotConfig#urls:member",
              "docComment": "/**\n * The HTTP URLs the bot is to handle. Must be a list of string\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "urls: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "urls",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@authless/common!BrowserConfig:interface",
          "docComment": "/**\n * Config to control puppeteer launch, default plugins, proxy and page handling config\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BrowserConfig "
            }
          ],
          "releaseTag": "Beta",
          "name": "BrowserConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!BrowserConfig#adBlockerConfig:member",
              "docComment": "/**\n * Options for the puppeteer-extra-adblocker-plugin\n *\n * @remarks\n *\n * Uses a pre-setup puppeteer-extra-adblocker-plugin with \\{blockTrackers: all\\} option by default If you would like to override it, you can do so here\n *\n * @beta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adBlockerConfig?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        blockTrackers: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "adBlockerConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!BrowserConfig#proxy:member",
              "docComment": "/**\n * Proxy configuration for puppeteer {@link puppeteer#ProxyConfig}\n *\n * @remarks\n *\n * If not provided, the puppeteer will run without a proxy\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "proxy?: "
                },
                {
                  "kind": "Reference",
                  "text": "ProxyConfig",
                  "canonicalReference": "@authless/common!ProxyConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "proxy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!BrowserConfig#puppeteerParams:member",
              "docComment": "/**\n * Options to control puppeteer launch {@link PuppeteerParams}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "puppeteerParams?: "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerParams",
                  "canonicalReference": "@authless/common!PuppeteerParams:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "puppeteerParams",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!BrowserConfig#puppeteerPlugins:member",
              "docComment": "/**\n * Additional plugins to puppeteer. Must be a valid initialized puppeteer plugin {@link PuppeteerParams}\n *\n * @example\n *\n * puppeteerPlugins: [MyPuppeteerPlugin(), OtherPuppeteerPlugin()]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "puppeteerPlugins?: "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerExtraPlugin",
                  "canonicalReference": "puppeteer-extra!PuppeteerExtraPlugin:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "puppeteerPlugins",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!BrowserConfig#urlParams:member",
              "docComment": "/**\n * The URL parameters to pass to the running Authless server {@link URLParams}\n *\n * @example\n * ```ts\n * { url: 'http://url.com/to/fetch', 'responseFormat': 'json' }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "urlParams?: "
                },
                {
                  "kind": "Reference",
                  "text": "URLParams",
                  "canonicalReference": "@authless/common!URLParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "urlParams",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!BrowserConfig#useAdBlockerPlugin:member",
              "docComment": "/**\n * Use the puppeteer-extra-adblocker-plugin\n *\n * @remarks\n *\n * Uses a pre-setup puppeteer-extra-adblocker-plugin with \\{blockTrackers: all\\} option by default\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useAdBlockerPlugin?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "useAdBlockerPlugin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!BrowserConfig#useStealthPlugin:member",
              "docComment": "/**\n * Use the puppeteer-extra-stealth-plugin\n *\n * @remarks\n *\n * Uses a pre-setup puppeteer-extra-stealth-plugin that gets used with the launched puppeteer instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useStealthPlugin?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "useStealthPlugin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@authless/common!IResource:interface",
          "docComment": "/**\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IResource "
            }
          ],
          "releaseTag": "Beta",
          "name": "IResource",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@authless/common!IResource#sha1:member(1)",
              "docComment": "/**\n * Creates the sha1 hash of the resource.\n *\n * @remarks\n *\n * If the resource has noisy attributes such as trackingIDs or debugging info that is not relevant to the resource as such, the implementation may decide to omit such attributes to produce the same sha1 hash for resources that would e.g. otherwise have different trackingID values.\n *\n * @example\n * ```ts\n * // example implementation of the sha1 function which omits the `trackingNumber` property\n * function sha1 (object): string {\n *   const clone = { ...object }\n *   Reflect.deleteProperty(clone, 'trackingNumber')\n *   return super.sha1(clone, { algorithm: 'sha1' })\n * }\n *\n * // Returns true\n * sha1({value: 1, trackingNumber: '123'}) === sha1({value: 1, trackingNumber: '456'})\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sha1(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [],
              "name": "sha1"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@authless/common!IResourceCollection:interface",
          "docComment": "/**\n * Holds none, one, or many {@link IResource | Resources} and is usually created via {@link IResponse.toResources}.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IResourceCollection<T extends "
            },
            {
              "kind": "Reference",
              "text": "IResource",
              "canonicalReference": "@authless/common!IResource:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Beta",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IResourceCollection",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@authless/common!IResourceCollection#toArray:member(1)",
              "docComment": "/**\n * Create an Array of {@link IResource | Resources}. Omits keys.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArray(): "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toArray"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@authless/common!IResponse:interface",
          "docComment": "/**\n * The raw response from a service including any (xhrs) requests and responses and meta information.\n *\n * @remarks\n *\n * A {@link IResponse} can be transformed into a {@link IResourceCollection} which extracts the most relevant data from an {@link IResponse}.\n *\n * Service repositories should create their own response class implementing {@link IResponse}.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IResponse "
            }
          ],
          "releaseTag": "Beta",
          "name": "IResponse",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!IResponse#main:member",
              "docComment": "/**\n * The main request & response chain. See {@link IResponseResponse}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "main: "
                },
                {
                  "kind": "Reference",
                  "text": "ISerializedResponse",
                  "canonicalReference": "@authless/common!ISerializedResponse:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "main",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!IResponse#meta:member",
              "docComment": "/**\n * Meta data about response. See {@link IResponse.meta}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "meta: "
                },
                {
                  "kind": "Reference",
                  "text": "IResponseMeta",
                  "canonicalReference": "@authless/common!IResponseMeta:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "meta",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!IResponse#page:member",
              "docComment": "/**\n * The main page response. See {@link IResponsePage}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "page: "
                },
                {
                  "kind": "Reference",
                  "text": "ISerializedPage",
                  "canonicalReference": "@authless/common!ISerializedPage:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "page",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@authless/common!IResponse#toResources:member(1)",
              "docComment": "/**\n * Creates a {@link IResponseResponse} from an {@link IResponse} instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toResources(): "
                },
                {
                  "kind": "Reference",
                  "text": "IResourceCollection",
                  "canonicalReference": "@authless/common!IResourceCollection:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IResource",
                  "canonicalReference": "@authless/common!IResource:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toResources"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!IResponse#xhrs:member",
              "docComment": "/**\n * Any XHR request & responses. See {@link IResponseResponse}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xhrs: "
                },
                {
                  "kind": "Reference",
                  "text": "ISerializedResponse",
                  "canonicalReference": "@authless/common!ISerializedResponse:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "xhrs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@authless/common!Mapper:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Mapper: "
            },
            {
              "kind": "Content",
              "text": "{\n    page: {\n        toObject: (page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISerializedPage",
              "canonicalReference": "@authless/common!ISerializedPage:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    };\n    request: {\n        toObject: (request: "
            },
            {
              "kind": "Reference",
              "text": "Request",
              "canonicalReference": "@types/puppeteer!Request:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISerializedRequest",
              "canonicalReference": "@authless/common!ISerializedRequest:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    };\n    response: {\n        toObject: (response: "
            },
            {
              "kind": "Reference",
              "text": "Response",
              "canonicalReference": "@types/puppeteer!Response:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISerializedResponse",
              "canonicalReference": "@authless/common!ISerializedResponse:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    };\n    securityDetails: {\n        toObject: (securityDetails: "
            },
            {
              "kind": "Reference",
              "text": "SecurityDetails",
              "canonicalReference": "@types/puppeteer!SecurityDetails:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISerializedSecurityDetails",
              "canonicalReference": "@authless/common!ISerializedSecurityDetails:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    };\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "Mapper",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 26
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@authless/common!ProxyConfig:interface",
          "docComment": "/**\n * Options to add a proxy to Puppeteer connections\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ProxyConfig "
            }
          ],
          "releaseTag": "Beta",
          "name": "ProxyConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!ProxyConfig#address:member",
              "docComment": "/**\n * The IP address of the proxy\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "address",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!ProxyConfig#credentials:member",
              "docComment": "/**\n * The user credentials to connect to the proxy\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "credentials: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        username: string;\n        password: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "credentials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!ProxyConfig#port:member",
              "docComment": "/**\n * The port number of the proxy\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "port: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "port",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@authless/common!PuppeteerParams:type",
          "docComment": "/**\n * Config options control puppeteer launch/request-handling options\n *\n * @remarks\n *\n * Puppeteer launch options includes all options that of type {@link puppeteer#LaunchOptions} Options to block domains/resourceTypes from loading {@link puppeteer#InterceptOptions} Options to control theh viewport {@link puppeteer#Viewport}\n *\n * @example\n * ```ts\n * {\n *    executablePath: '/Path/To/Your/Chromium', // optional\n *    headless: false, // default true,\n *    // other options that can be passed to puppeteer(options)\n *\n *    blockDomains: ['social-media-buttons.com', 'large-image-host.com'],\n *    blockResourceTypes: ['image', 'media', 'font'],\n *    viewPort: { width: 1020, height: 800 }\n * }\n * ```\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PuppeteerParams = "
            },
            {
              "kind": "Reference",
              "text": "LaunchOptions",
              "canonicalReference": "@types/puppeteer!LaunchOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "InterceptOptions",
              "canonicalReference": "@authless/common!~InterceptOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & {\n    viewPort?: "
            },
            {
              "kind": "Reference",
              "text": "Viewport",
              "canonicalReference": "@types/puppeteer!Viewport:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Beta",
          "name": "PuppeteerParams",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@authless/common!Resource:class",
          "docComment": "/**\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class Resource implements "
            },
            {
              "kind": "Reference",
              "text": "IResource",
              "canonicalReference": "@authless/common!IResource:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Beta",
          "name": "Resource",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@authless/common!Resource#sha1:member(1)",
              "docComment": "/**\n * See {@link IResource.sha1}.\n *\n * @remarks\n *\n * Does not omit any properties of the resource\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sha1(input?: "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "sha1"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@authless/common!ResourceCollection:class",
          "docComment": "/**\n * Abstract implementation of {@link IResourceCollection}. Extends {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map | Map}.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class ResourceCollection<T extends "
            },
            {
              "kind": "Reference",
              "text": "IResource",
              "canonicalReference": "@authless/common!IResource:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<string, T> "
            }
          ],
          "releaseTag": "Beta",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ResourceCollection",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@authless/common!ResourceCollection#toArray:member(1)",
              "docComment": "/**\n * see {@link IResourceCollection}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArray(): "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toArray"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@authless/common!ResourceConstructor:var",
          "docComment": "/**\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ResourceConstructor: "
            },
            {
              "kind": "Content",
              "text": "{\n    toHashResourcePair<T extends "
            },
            {
              "kind": "Reference",
              "text": "IResource",
              "canonicalReference": "@authless/common!IResource:interface"
            },
            {
              "kind": "Content",
              "text": ">(resources: T[]): [string, T][];\n}"
            }
          ],
          "releaseTag": "Beta",
          "name": "ResourceConstructor",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@authless/common!Response_2:class",
          "docComment": "/**\n * see {@link IResponse}\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Response implements "
            },
            {
              "kind": "Reference",
              "text": "IResponse",
              "canonicalReference": "@authless/common!IResponse:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Beta",
          "name": "Response_2",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@authless/common!Response_2:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Response` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(serializedResponse: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "serializedResponse",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@authless/common!Response_2.fromPage:member(1)",
              "docComment": "/**\n * Construct a {@link Response} instance from the puppeteer page\n *\n * @remarks\n *\n * Override this to add custom data/metadata to your Authless response {@link IResponse}.\n *\n * @param page - the puppeteer page from which to extract the response object\n *\n * @param mainResponse - the main puppeteer response from which to extract the Xhr object {@link Xhr}\n *\n * @returns the generated {@link Response}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromPage(bot: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", page: "
                },
                {
                  "kind": "Reference",
                  "text": "Page",
                  "canonicalReference": "@types/puppeteer!Page:interface"
                },
                {
                  "kind": "Content",
                  "text": ", mainResponse: "
                },
                {
                  "kind": "Reference",
                  "text": "ResponsePuppeteer",
                  "canonicalReference": "@types/puppeteer!Response:interface"
                },
                {
                  "kind": "Content",
                  "text": ", xhrResponses: "
                },
                {
                  "kind": "Reference",
                  "text": "ResponsePuppeteer",
                  "canonicalReference": "@types/puppeteer!Response:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Response",
                  "canonicalReference": "@authless/common!Response:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "bot",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "page",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "mainResponse",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "xhrResponses",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 9
                  }
                }
              ],
              "name": "fromPage"
            },
            {
              "kind": "Property",
              "canonicalReference": "@authless/common!Response_2#main:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "main: "
                },
                {
                  "kind": "Reference",
                  "text": "ISerializedResponse",
                  "canonicalReference": "@authless/common!ISerializedResponse:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "main",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@authless/common!Response_2#meta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "meta: "
                },
                {
                  "kind": "Reference",
                  "text": "IResponseMeta",
                  "canonicalReference": "@authless/common!IResponseMeta:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "meta",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@authless/common!Response_2#page:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "page: "
                },
                {
                  "kind": "Reference",
                  "text": "ISerializedPage",
                  "canonicalReference": "@authless/common!ISerializedPage:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "page",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@authless/common!Response_2#toResources:member(1)",
              "docComment": "/**\n * see {@link IResponse.toResources}. Needs to be implemented by services.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toResources(): "
                },
                {
                  "kind": "Reference",
                  "text": "IResourceCollection",
                  "canonicalReference": "@authless/common!IResourceCollection:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IResource",
                  "canonicalReference": "@authless/common!IResource:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toResources"
            },
            {
              "kind": "Property",
              "canonicalReference": "@authless/common!Response_2#xhrs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xhrs: "
                },
                {
                  "kind": "Reference",
                  "text": "ISerializedResponse",
                  "canonicalReference": "@authless/common!ISerializedResponse:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "xhrs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@authless/common!URLParams:interface",
          "docComment": "/**\n * URL parameters accepted by Authless server\n *\n * @remarks\n *\n * URL parameters allow you to run an Authless server and send HTTP requests to it with the url you want it to fetch. Authless server will return an Authless response {@link IResponse} of your choice\n *\n * @example\n * ```ts\n * {\n *    url: 'www.example.net/url/to/fetch',\n *    responseFormat: 'json', // will return an object in JSON format\n * }\n * ```\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface URLParams "
            }
          ],
          "releaseTag": "Beta",
          "name": "URLParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!URLParams#referer:member",
              "docComment": "/**\n * The referer URL that will be added to the puppeteer request\n *\n * @remarks\n *\n * Adding a proper referer makes your request much less likely to get flagged as a bot. Try to add a reasonable referer URL\n *\n * @beta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "referer?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "referer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!URLParams#responseFormat:member",
              "docComment": "/**\n * The required response format of Authless response\n *\n * @remarks\n *\n * Currently, only 'json' is supported\n *\n * @beta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "responseFormat: "
                },
                {
                  "kind": "Content",
                  "text": "'json' | 'png'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "responseFormat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!URLParams#url:member",
              "docComment": "/**\n * The HTTP url to fetch\n *\n * @example\n * ```ts\n * 'www.example.net/url/to/fetch'\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@authless/common!URLParams#username:member",
              "docComment": "/**\n * The username whose credentials will be used for the fetch\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "username?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "username",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
